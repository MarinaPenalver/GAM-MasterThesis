unos = ones(n)
c(1)*n
n <- 2
I <- diag(n)
uno_n <- matrix(rep(1, n), n, 1)
View(uno_n)
resultado <- I - (1/n) * uno_n %*% t(uno_n)
I - (1/n) * uno_n %*% t(uno_n)
n <- 4
I <- diag(n)
uno_n <- matrix(rep(1, n), n, 1)
I - (1/n) * uno_n %*% t(uno_n)
n <- 4
I <- diag(n)
uno_n <- matrix(rep(1, n), n, 1)
I - (1/n) * uno_n %*% t(uno_n)
Q <- I - (1/n) * uno_n %*% t(uno_n)
X <- matrix(1:12, nrow = 3, ncol = 4)
X
X <- matrix(1:12, nrow = 4, ncol = 3)
X
3
3
X <- matrix(1:12, nrow = 3, ncol = 4)
X
X <- matrix(1:12, nrow = 4, ncol = 3)
X
Q*X
dim(Q)
dim(X)
Q %*% X
uno_n %*% X
t(uno_n) %*% X
Q %*% X
Q %*% Q %*% X
citation(lm)
?lm
citation("lm")
citation("MASS")
citation("stats")
citation("MASS")
R2.gam2 <- vector(mode = "numeric", length = 20)
t1 = Sys.time()
for(i in 1:20)
{   y = as.numeric(NBdata[i,])
gam1=gam(y ~ ns(Time,df = 1 + 3)*Group, family=poisson())
R2.gam2[i] = R2(gam1)
}
library(maSigPro)
data(NBdata)
data(NBdesign)
Time=NBdesign[,1]
G = NBdesign[,3:4]
Group = G[,1]+2*G[,2]
Group = factor(Group, labels = colnames(G))
R2 = function(model){(model$null.deviance-model$deviance)/model$null.deviance}
d <- make.design.matrix(NBdesign)
NBp <- p.vector(NBdata, d, counts=TRUE, family = poisson())
NBp$p.vector #este vector tiene los p.vals de los modelos con todas las vars.
p.gam <- vector(mode = "numeric", length = 100)
R2.gam <- vector(mode = "numeric", length = 100)
for(i in 1:100)
{
y = as.numeric(NBdata[i,])
gam0 = gam(y~1, family=poisson())
gam1=gam(y~ns(Time,df=1+3)*Group, family=poisson())
test = anova(gam0,gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1) #lo pongo por curiosidad, pero el
}
library(mgcv)
library(splines)
p.gam <- vector(mode = "numeric", length = 100)
R2.gam <- vector(mode = "numeric", length = 100)
for(i in 1:100)
{
y = as.numeric(NBdata[i,])
gam0 = gam(y~1, family=poisson())
gam1=gam(y~ns(Time,df=1+3)*Group, family=poisson())
test = anova(gam0,gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1) #lo pongo por curiosidad, pero el
}
which(p.gam<0.05)
sum(p.gam<0.05)
p.gam
# esto es sólo un chequeo para que veas cómo funciona la función p.vector.
p.vector <- vector(mode = "numeric", length = 100)
R2.glm <- vector(mode = "numeric", length = 100)
for(i in 1:100)
{
y = as.numeric(NBdata[i,])
glm0 = glm(y~1, family=poisson(),epsilon=1e-5)
glm1 <- glm(y ~ Time*Group, family=poisson(),epsilon=1e-5)
test = anova(glm0,glm1, test = "Chisq")
p.vector[i] = test[5][2, 1]
R2.glm[i] = R2(glm1)
}
max(p.vector-NBp$p.vector) #se puede ver que es lo mismo
p.adjusted <- p.adjust(p.vector, method ="BH", n = length(p.vector))
which(p.adjusted<0.05)
sum(p.adjusted<0.05)
p.vector
citation("splines")
?smooth.spline
?splines
citation("splines")
citation("maSigPro")
library(maSigPro)
data(NBdata)
data(NBdesign)
d <- make.design.matrix(NBdesign)
design <- as.data.frame(NBdesign)
# Función de maSigPro con GLM
fit <- p.vector(NBdata, d, Q = 0.05, MT.adjust = "BH", min.obs = 20, family=poisson())
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t1 - t2
tstep$sol$`R-squared`
t2 - t1
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
# GAM
library(mcgv)
library(splines)
# GAM
library(mgcv)
library(splines)
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
Time=NBdesign[,1]
G = NBdesign[,3:4]
Group = G[,1]+2*G[,2]
Group = factor(Group, labels = colnames(G))
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
R2 = function(model){(model$null.deviance-model$deviance)/model$null.deviance}
# GAM
library(mgcv)
library(splines)
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
?gam
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson(), epsilon=1e-5)
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson(), epsilon=1e-1)
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:100){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
t2 = Sys.time()
t2 - t1
which(p.gam<0.05)
sum(p.gam<0.05)   # Selecciona los 20
p.gam
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
# Media de tiempos
n_reps <- 100
times <- numeric(n_reps)
for (i in 1:n_reps) {
t1 <- Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family = poisson())
t2 <- Sys.time()
times[i] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
t2 = Sys.time()
t2 - t1
# Media de tiempos
n_reps <- 100
times <- numeric(n_reps)
for (i in 1:n_reps) {
t1 <- Sys.time()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family = poisson())
t2 <- Sys.time()
times[i] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
n_reps <- 100
times <- numeric(n_reps)
for (i in 1:n_reps) {
t1 <- Sys.time()
fit <- p.vector(NBdata, d, Q = 0.05, MT.adjust = "BH", min.obs = 20, family=poisson())
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family = poisson())
t2 <- Sys.time()
times[i] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
t1 = Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for(i in 1:20){
y = as.numeric(NBdata[i, ])
gam0 = gam(y ~ 1, family = poisson())
gam1=gam(y ~ ns(Time, df = 1 + 3)*Group, family = poisson())
test = anova(gam0, gam1, test = "Chisq")
p.gam[i] = test[5][2, 1]
R2.gam[i] = R2(gam1)
}
t2 = Sys.time()
t2 - t1
n_reps <- 100
times <- numeric(n_reps)
for (j in 1:n_reps) {
t1 <- Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for (i in 1:20) {
y <- as.numeric(NBdata[i, ])
gam0 <- gam(y ~ 1, family = poisson())
gam1 <- gam(y ~ ns(Time, df = 1 + 3) * Group, family = poisson())
test <- anova(gam0, gam1, test = "Chisq")
p.gam[i] <- test[5][2, 1]
R2.gam[i] <- R2(gam1)
}
t2 <- Sys.time()
times[j] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
# Media de tiempos
n_reps <- 100
times <- numeric(n_reps)
for (j in 1:n_reps) {
t1 <- Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for (i in 1:20) {
y <- as.numeric(NBdata[i, ])
# gam0 <- gam(y ~ 1, family = poisson())
gam1 <- gam(y ~ ns(Time, df = 1 + 3) * Group, family = poisson())
# test <- anova(gam0, gam1, test = "Chisq")
# p.gam[i] <- test[5][2, 1]
R2.gam[i] <- R2(gam1)
}
t2 <- Sys.time()
times[j] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
n_reps <- 100
times <- numeric(n_reps)
for (j in 1:n_reps) {
t1 <- Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for (i in 1:100) {
y <- as.numeric(NBdata[i, ])
# gam0 <- gam(y ~ 1, family = poisson())
gam1 <- gam(y ~ ns(Time, df = 1 + 3) * Group, family = poisson())
# test <- anova(gam0, gam1, test = "Chisq")
# p.gam[i] <- test[5][2, 1]
R2.gam[i] <- R2(gam1)
}
t2 <- Sys.time()
times[j] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
n_reps <- 100
times <- numeric(n_reps)
for (j in 1:n_reps) {
t1 <- Sys.time()
p.gam <- vector(mode = "numeric", length = 20)
R2.gam <- vector(mode = "numeric", length = 20)
for (i in 1:100) {
y <- as.numeric(NBdata[i, ])
gam0 <- gam(y ~ 1, family = poisson())
gam1 <- gam(y ~ ns(Time, df = 1 + 3) * Group, family = poisson())
test <- anova(gam0, gam1, test = "Chisq")
p.gam[i] <- test[5][2, 1]
R2.gam[i] <- R2(gam1)
}
t2 <- Sys.time()
times[j] <- as.numeric(difftime(t2, t1, units = "secs"))
}
mean_time <- mean(times)
cat("El tiempo medio de ejecución es:", mean_time, "segundos\n")
?solve
setwd("C:/Users/mpena/MÁSTER/TFM/GitHub/GAM-MasterThesis")
# Paquete
library(maSigPro)
# Datos
data(NBdata)
data(NBdesign)
head(NBdata)
head(NBdesign)
d <- make.design.matrix(NBdesign)
design <- as.data.frame(NBdesign)
# Gráficos
par(mfrow=c(2,2))
PlotGroups(NBdata[1,], edesign = NBdesign) #los primeros 10 con claras diferencias
PlotGroups(NBdata[11,], edesign = NBdesign)
PlotGroups(NBdata[15,], edesign = NBdesign) #los siguientes 10 con más varianza, gen15 no se selecciona en Tfit
PlotGroups(NBdata[25,], edesign = NBdesign) #el resto es aleatorio
# Primeros 10
par(mfrow=c(3, 4))
for (i in 1:10) {
PlotGroups(NBdata[i,], edesign = NBdesign)
}
# De 11 a 20
par(mfrow=c(3, 4))
for (i in 11:20) {
PlotGroups(NBdata[i,], edesign = NBdesign)
}
# De 21 a 36: Aleatorios
par(mfrow=c(4, 4))
for (i in 21:36) {
PlotGroups(NBdata[i,], edesign = NBdesign)
}
combined_plot <- plot_genes(c(11:19), design, NBdata, ncol = 3, nrow=3)
print(combined_plot)
library(ggplot2)
library(patchwork)
plot_gene<- function(gene_number, design, NBdata) {
gene_data <- data.frame(
Time = design$Time[1:18],
Group1 = NBdata[gene_number, 1:18],
Group2 = NBdata[gene_number, 19:36]
)
data_mean <- data.frame(
Time = c(0, 12, 24, 36, 48, 60),
Mean.G1 = sapply(split(gene_data$Group1, gene_data$Time), mean),
Mean.G2 = sapply(split(gene_data$Group2, gene_data$Time), mean)
)
plot <- ggplot(gene_data) +
geom_point(data=gene_data, aes(x = Time, y = Group1, color = "Grupo 1")) +
geom_point(data=gene_data, aes(x = Time, y = Group2, color = "Grupo 2")) +
geom_line(data=data_mean, aes(x = Time, y = Mean.G1), linewidth = 1, color="coral") +
geom_line(data=data_mean, aes(x = Time, y = Mean.G2), linewidth = 1, color="steelblue2") +
labs(title = paste("Gen", gene_number),
x = "Tiempo",
y = "Expresión",
color = NULL) +
scale_color_manual(values = c("Grupo 1" = "coral", "Grupo 2" = "steelblue2")) +
theme_light()
}
plot <- plot_gene(52, design, NBdata)
print(plot)
# Funcion para combinar gráficos
plot_genes <- function(gene_numbers, design, NBdata, ncol, nrow) {
plots <- list()
j=1
for (i in gene_numbers) {
plots[[j]] <- plot_gene(i, design, NBdata)
j = j + 1
}
combined_plot <- wrap_plots(plots, ncol=ncol, nrow=nrow)
}
# De 1 a 3 y 11 a 13
combined_plot <- plot_genes(c(1:3, 11:13), design, NBdata, ncol = 3, nrow=2)
print(combined_plot)
ggsave("graphs/NBdata1.pdf", combined_plot, width = 12, height = 6, dpi = 300)
# Paquete
library(maSigPro)
# Datos
data(NBdata)
data(NBdesign)
head(NBdata)
head(NBdesign)
d <- make.design.matrix(NBdesign)
design <- as.data.frame(NBdesign)
fit <- p.vector(NBdata, d, Q = 0.05, MT.adjust = "BH", min.obs = 20, family=poisson())
rownames(fit$SELEC)
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family=poisson())
rownames(tstep$sig.profiles)
sigs <- get.siggenes(tstep, rsq = 0.7, vars = "groups")
sigs$summary
get.siggenes(tstep, rsq = 0.7, vars = "all")$summary
# Se excluyen los genes 15, 16, 17, 20
combined_plot <- plot_genes(c(15, 16, 17, 20), design, NBdata, ncol = 2, nrow=2)
print(combined_plot)
# Vamos a proceder al estudio con el gen con mayor R cuadrado
tstep$sol[which.max(tstep$sol$`R-squared`), ]
